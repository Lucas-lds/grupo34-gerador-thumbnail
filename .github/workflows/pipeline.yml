name: Full Cloud Deploy

on:
  push:
    branches:
      - master

jobs:
  # 1. Build e validação da aplicação
  build-application:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build application
        run: |
          chmod +x mvnw # Concede permissão de execução ao Maven Wrapper
          ./mvnw clean verify jacoco:report

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      # - name: SonarQube Scan
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   run: |
      #     ./mvnw sonar:sonar \
      #     -Dsonar.projectKey=Lucas-lds_grupo34-gerador-thumbnail \
      #     -Dsonar.organization=lucas-lds \
      #     -Dsonar.projectName=grupo34-gerador-thumbnail \
      #     -Dsonar.host.url=$SONAR_HOST_URL \
      #     -Dsonar.login=$SONAR_TOKEN \
      #     -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
      #     -Dsonar.java.binaries=target/classes


    # 2. Provisionar infraestrutura com Terraform
  provision-infrastructure:
    runs-on: ubuntu-latest
    needs: build-application
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        # with:
        #  path: .

      - name: Diagnóstico da árvore de arquivos
        run: |
          ls -l
          ls -l lambda-criar-usuario

      - name: Zip Lambda criar usuário
        run: |
          zip -j lambda-criar-usuario/lambda_function.zip lambda-criar-usuario/lambda_function.py

      - name: Zip Lambda persist user
        run: |
          zip -j lambda-persist-user/lambda_function.zip lambda-persist-user/lambda_function.py
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Plan
        id: terraform-plan
        run: terraform plan -out=tfplan
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply (Conditional)
        if: steps.terraform-plan.outcome == 'success'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
